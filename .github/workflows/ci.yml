name: CI - Build and Release

permissions:
  contents: write

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  lint:
    name: Linting & Static Analysis
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install tox
        run: pip install tox
      - name: Run Linters
        run: tox -e lint

  security:
    name: Security Audits
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install tox
        run: pip install tox
      - name: Run Security Checks
        env:
          SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
        run: tox -e security

  complexity:
    name: Code Complexity & Dead Code Analysis
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install tox
        run: pip install tox
      - name: Run Complexity & Dead Code Checks
        run: tox -e complexity

  deps:
    name: Dependency Analysis
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install tox
        run: pip install tox
      - name: Run Dependency Checks
        run: tox -e deps

  test:
    name: Run Tests
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          pip install tox
      - name: Run Tests
        run: tox -e py312

  package:
    name: Package and Upload Artifact
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Read Major & Revision from pyproject.toml
        id: version
        run: echo "VERSION=$(grep '^version' pyproject.toml | cut -d '\"' -f2)" >> $GITHUB_ENV
      - name: Package app into tarball
        run: |
          cd src/
          tar -czf lynx-v${{ env.VERSION }}.${{ github.run_number }}.tar.gz lynx requirements.txt
          mv lynx-v${{ env.VERSION }}.${{ github.run_number }}.tar.gz ../
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lynx-package-v${{ env.VERSION }}.${{ github.run_number }}
          path: lynx-v${{ env.VERSION }}.${{ github.run_number }}.tar.gz
          compression-level: 9

  release:
    name: Create GitHub Release
    runs-on: ubuntu-20.04
    needs: [lint, security, complexity, deps, test, package]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read Major & Revision from pyproject.toml
        id: version
        run: echo "VERSION=$(grep '^version' pyproject.toml | cut -d '\"' -f2)" >> $GITHUB_ENV

      - name: Download Package Artifact
        uses: actions/download-artifact@v4
        with:
          name: lynx-package-v${{ env.VERSION }}.${{ github.run_number }}
          path: .

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: "v${{ env.VERSION }}.${{ github.run_number }}"
          name: "Lynx v${{ env.VERSION }}.${{ github.run_number }}"
          body: "ðŸš€ **New Release**: Lynx v${{ env.VERSION }}.${{ github.run_number }}"
          draft: false
          prerelease: false
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "lynx-v${{ env.VERSION }}.${{ github.run_number }}.tar.gz"